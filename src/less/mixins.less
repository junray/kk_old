/*-------------------
     Util mixins
--------------------*/

//SIZES
/* responsive font size */
.fluid-type(@property, @min-vw, @max-vw, @min-size, @max-size) {
  @{property}: @min-size!important;
  @media screen and (min-width: @min-vw) {
    @{property}: calc(
      @min-size ~' + ' unit(@max-size - @min-size) ~' * ((100vw - ' @min-vw ~') /'
        unit(@max-vw - @min-vw) ~')'
    ) !important;
  }
  @media screen and (min-width: @max-vw) {
    @{property}: @max-size!important;
  }
}

/* adding custom sizes to the default ones. The default variables are declared in the default variable file of the lib  */
@micro: unit(round(@microSize * @emSize) / @emSize, rem);
@macro: unit(round(@macroSize * @emSize) / @emSize, rem);

@font-sizes: micro, mini, tiny, small, medium, large, big, huge, massive, macro;

/* call it to create classes with all the sizes variables */
.generate-sizes(length(@font-sizes));
.do-sizes(@sizes, @respSize, @header) {
  .@{sizes},
  @{header}&.header.@{sizes},
  @{header}.@{sizes},
  @{header}.header.@{sizes} {
    .fluid-type(font-size, 320px, 1200px, @@sizes, @@respSize);
  }
}
.generate-sizes(@n, @i: 1) when (@i =< @n) {
  @size: extract(@font-sizes, @i);
  @respSize: extract(@font-sizes, (@i + 1));

  @header: ~'h@{i}';

  & when (iskeyword(@respSize)) {
    .do-sizes(@size, @respSize, @header);
  }

  .generate-sizes(@n, (@i + 1));
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//COLORS

/* TODO uniformare i white bg e creare eventualmente un mixing per gestire backgrounds di diversi colori */

/* call it to create classes with background colors and text color */
.generate-colors(length(@colors));

/* call it to create classes with lighten background colors and text color */
.generate-lighten(length(@lightColors));

/* call it to create classes with lighten background colors and text color */
.generate-extralighten(length(@extraLightColors));

/* call it to create classes with darken background colors and text color */
.generate-darken(length(@darkColors));

//generate class with color name

.coloring(@color) {
  .bg-@{color} {
    background-color: @@color!important;
  }
  .text-@{color} {
    color: @@color!important;
  }
}
//loop into the list of colors
.generate-colors(@n, @i: 1) when (@i =< @n) {
  @col: extract(@colors, @i);
  .coloring(@col);
  .generate-colors(@n, (@i + 1));
}

//loop into the list of colors
.generate-extralighten(@n, @i: 1) when (@i =< @n) {
  @col: extract(@extraLightColors, @i);
  .coloring(@col);
  .generate-extralighten(@n, (@i + 1));
}

//loop into the list of colors
.generate-lighten(@n, @i: 1) when (@i =< @n) {
  @col: extract(@lightColors, @i);
  .coloring(@col);
  .generate-lighten(@n, (@i + 1));
}

//loop into the list of colors
.generate-darken(@n, @i: 1) when (@i =< @n) {
  @col: extract(@darkColors, @i);
  .coloring(@col);
  .generate-darken(@n, (@i + 1));
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/*
  MIXIN TO GENERATE CLASSES FOR MARGINS AND PADDING
  USE:
  class="m-top-0_5" => margin-top: (half of margin base)
  class="m-top1x" => margin-top: (margin base)
  class="m-top1_5x" => margin-top: (1.5 margin base)
  class="m-bottom2x" => margin-bottom: (doppio del margin base)
  class="m-left3x" => margin-top: (triplo del margin base)
  class="p-top2x" => padding-top: (triplo del margin base)
  class="p-left3x" => padding-top: (triplo del margin base)
  =====
  verticale
  class="p-ver1x" => padding-top: (triplo del margin base)
  orizzontale
  class="p-hor1x" => padding-top: (triplo del margin base)
  ..
  class="m-y1" => margin: 0 1rem (margin vertical)

*/
/* FOR MARGINS */
/*
 instructions:\
   @incr: size of the margin
   @directions: directions (top, right, bottom, left)
   @sizes: calculate the rem margin basing on the gutter variable
*/

// variables for margin and padding mixins
@directions: '', hor, ver, top, right, bottom, left;
@margins: 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4;
@paddings: 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4;

.generate-margins(length(@margins));

.make-margin(@incr, @directions) {
  @size: (@margin) * @incr;

  /* loop through directions, call the loop mixin passing the length of the array of directions */
  .do-margin(length(@directions));

  /* mixin to generate the rule */
  .do-margin(@directionsLength, @index: 1) when (@index =< @directionsLength) {
    /* extract the current ax */
    @direction: extract(@directions, @index);
    /* calculate the value of the margin */
    //replace the dot in the size
    @inc: e(replace('@{incr}', '\.', '_'));

    /* for all directions */
    & when not (@direction = '') {
      & when (@direction = hor) {
        .m-@{direction}@{inc}x {
          margin-left: ~'@{size}' !important;
          margin-right: ~'@{size}' !important;
        }
      }

      & when (@direction = ver) {
        .m-@{direction}@{inc}x {
          margin-top: ~'@{size}' !important;
          margin-bottom: ~'@{size}' !important;
        }
      }
      & when not (@direction = hor) {
        & when not (@direction = ver) {
          .m-@{direction}@{inc}x {
            margin-@{direction}: ~'@{size}' !important;
          }
        }
      }
    }
    /* for each direction */
    & when (@direction = '') {
      .m-@{inc}x {
        margin: ~'@{size}' !important;
      }
    }

    /* recall the mixin to generate the loop */
    .do-margin(@directionsLength, (@index + 1));
  }
}

/* loop through the length of the sizes array */
.generate-margins(@marginLength, @index: 1) when (@index =< @marginLength) {
  /* call the main  mixing to write the rule */
  //.make-margin(extract(@margins, @index), @axes);
  .make-margin(extract(@margins, @index), @directions);
  /* call itself to generate the loop */
  .generate-margins(@marginLength, (@index + 1));
}

// FOR PADDINGS
.generate-paddings(length(@paddings));
.make-padding(@incr, @directions) {
  @size: (@padding) * @incr;

  .do-padding(length(@directions));
  .do-padding(@directionsLength, @index: 1) when (@index =< @directionsLength) {
    @direction: extract(@directions, @index);
    //replace the dot in the size
    @inc: e(replace('@{incr}', '\.', '_'));
    /* for all directions */
    & when not (@direction = '') {
      & when (@direction = hor) {
        .p-@{direction}@{inc}x {
          padding-left: ~'@{size}' !important;
          padding-right: ~'@{size}' !important;
        }
      }

      & when (@direction = ver) {
        .p-@{direction}@{inc}x {
          padding-top: ~'@{size}' !important;
          padding-bottom: ~'@{size}' !important;
        }
      }
      & when not (@direction = hor) {
        & when not (@direction = ver) {
          .p-@{direction}@{inc}x {
            padding-@{direction}: ~'@{size}' !important;
          }
        }
      }
    }

    & when (@direction = '') {
      .p-@{inc}x {
        padding: ~'@{size}' !important;
      }
    }
    .do-padding(@directionsLength, (@index + 1));
  }
}

.generate-paddings(@paddingLength, @index: 1) when (@index =< @paddingLength) {
  //.make-padding(extract(@paddings, @index), @axes);
  .make-padding(extract(@paddings, @index), @directions);
  .generate-paddings(@paddingLength, (@index + 1));
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

/*
  to make classes for absolute position:
  .abs-{directions}-{offset}{
    position: absolute;
    {directions}: {offset}rem
  }
*/
/* to make classes for absolute positioning */
@dirs: top, right, bottom, left;

.make-absolute(@dirs, 0);
.make-absolute(@dirs, 1);
.make-absolute(@dirs, -1);
.make-absolute(@dirs, 2);
.make-absolute(@dirs, -2);

.make-absolute(@directions, @offset) {
  .loop(length(@directions));
  .loop(@o, @i: 1) when (@i =< @o) {
    @e: extract(@directions, @i);

    .abs-@{e}-@{offset}x {
      position: absolute;
      @{e}: @offset * @feSpace !important;
    }
    .loop(@o, (@i + 1));
  }
}

/* make z-index classes */

.make-zIndex(20);

.make-zIndex(@n, @i: 1) when (@i =< @n) {
  .zIndex-@{i} {
    z-index: ~'@{i}00!important';
  }
  .make-zIndex(@n, (@i + 1));
}

/* generate full screen width div within a boxed container 
  it accepts one parameters:
  @color: the actual name of the color, EX: "extraLightRed"
*/

.full-width (@color) {
  .full-width-@{color} {
    position: relative;
    background: @@color;

    &:after,
    &:before {
      content: '';
      background: @@color;
      position: absolute;
      width: 100%; //calc(~'50vw - 50%');
      height: 100%;
      position: absolute;
      top: 0;
    }
    &:after {
      transform: translateX(100%);
    }

    &:before {
      transform: translateX(-100%);
    }
  }
}
